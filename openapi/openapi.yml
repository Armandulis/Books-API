openapi: 3.0.3
info:
  title: Books
  description: "Fetch books by book's title, author, or isbn"
  version: "v2"
servers:
  - url: http://localhost:8041/api
    description: local

paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: librarian@gmail.com
                password:
                  type: string
                  format: password
                  example: librarian
      responses:
        "200":
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    minItems: 1
                    properties:
                      message:
                          type: string

        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"

  /api/login:
    post:
      summary: Authenticate user and retrieve JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - username
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                username:
                  type: string
                  example: librarian
      responses:
        "200":
          description: Authentication successful, JWT returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: jwttoken123124214
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"

  /v2/books/search:
    get:
      summary: "v2 latest version - Fetch books by book's title, author, or isbn"
      security:
        - Bearer: [ ]
      parameters:
        - in: query
          name: searchType
          description: "The search type we want to search by (title, author, or isbn)"
          required: true
          schema:
            type: string
            enum:
              - title
              - author
              - isbn
            example: title
        - in: query
          name: searchValue
          description: "The search value we want to search for (Throne of glass, Sarah\
          \ J. Maas, or isbn_9788377478844)"
          required: true
          schema:
            type: string
            example: Throne of glass
        - in: query
          name: page
          description: Page of the results
          required: false
          schema:
            type: integer
            example: 2
        - in: query
          name: limit
          description: Limit the results
          required: false
          schema:
            type: integer
            example: 25
      responses:
        "400":
          description: Missing required arguments
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "500":
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "200":
          description: A list of found books
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    minItems: 0
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        externalId:
                          type: string
                        title:
                          type: string
                        firstPublishYear:
                          type: integer
                        authors:
                          type: array
                          items:
                            type: object
                            properties:
                              schema:
                                $ref: "#/components/schemas/Authors"
                        isbns:
                          minItems: 0
                          type: array
                          items:
                            type: array
                            description: A list of book's ISBNs
  /v1/knygos/paieska:
    get:
      summary: "v1 lithuanian endpoint - Fetch books by book's title, author, or isbn"
      security:
        - Bearer: [ ]
      parameters:
        - in: query
          name: paieskosTipas
          description: "The search type we want to search by (title, author, or isbn)"
          required: true
          schema:
            type: string
            enum:
              - title
              - author
              - isbn
            example: title
        - in: query
          name: paieska
          description: "The search value we want to search for (Throne of glass, Sarah\
          \ J. Maas, or isbn_9788377478844)"
          required: true
          schema:
            type: string
            example: Throne of glass
        - in: query
          name: puslapis
          description: Page of the results
          required: false
          schema:
            type: integer
            example: 2
        - in: query
          name: limitas
          description: Limit the results
          required: false
          schema:
            type: integer
            example: 25
      responses:
        "400":
          description: Missing required arguments
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "500":
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "200":
          description: A list of found books
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    minItems: 0
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        externalId:
                          type: string
                        title:
                          type: string
                        firstPublishYear:
                          type: integer
                        authors:
                          type: array
                          items:
                            type: object
                            properties:
                              schema:
                                $ref: "#/components/schemas/Authors"
                        isbns:
                          minItems: 0
                          type: array
                          items:
                            type: array
                            description: A list of book's ISBNs

components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Errors:
      properties:
        code:
          type: integer
          description: Status code
        message:
          type: string
          description: Exception message
        errors:
          type: array
          minItems: 0
          description: In case of errors in specific fields, this field is set to return error message for each field
    Authors:
      properties:
        id:
          type: integer
        name:
          type: string